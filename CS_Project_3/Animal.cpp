/**
**	Program: Animal Object
**	Author: Austin Chayka
**	Date: 11.7.2019
**	Description: Implementation of the animal object
**/
#include "Animal.h"

/**
**	Function: constructor
**	Description: sets default variable values
**	Parameters: none
**/
Animal::Animal() {

	purchase_cost = 0;
	base_feeding_cost = 80;
	feeding_cost_multiplier = 0;
	age = 0;
	revenue_percentage = 0.0;
	sick = false;

}

/**
**	Function: copy constructor
**	Description: sets default variable values to those of an existing object
**	Parameters: object to copy from
**/
Animal::Animal(const Animal &copy_animal) {

	purchase_cost = copy_animal.purchase_cost;
	base_feeding_cost = copy_animal.base_feeding_cost;
	feeding_cost_multiplier = copy_animal.feeding_cost_multiplier;
	age = copy_animal.age;
	revenue_percentage = copy_animal.revenue_percentage;
	sick = copy_animal.sick;

}

/**
**	Function: assignment opperator overload
**	Description: sets variable values to those of an existing object
**	Parameters: object to copy from
**/
Animal& Animal::operator=(const Animal &copy_animal) {

	purchase_cost = copy_animal.purchase_cost;
	base_feeding_cost = copy_animal.base_feeding_cost;
	feeding_cost_multiplier = copy_animal.feeding_cost_multiplier;
	age = copy_animal.age;
	revenue_percentage = copy_animal.revenue_percentage;
	sick = copy_animal.sick;

	return *this;

}

/**
**	Function: destructor
**	Description: deallocates memory
**	Parameters: none
**/
Animal::~Animal() {}

/**
**	Function: set purchase cost
**	Description: sets purchase cost
**	Parameters: new purchase cost
**/
void Animal::set_purchase_cost(int purchase_cost) {

	this->purchase_cost = purchase_cost;

}

/**
**	Function: get purchase cost
**	Description: gets purchase cost
**	Parameters: none
**/
int Animal::get_purchase_cost() {

	return purchase_cost;

}

/**
**	Function: set base feeding cost
**	Description: sets base feeding cost
**	Parameters: new base feeding cost
**/
void Animal::set_base_feeding_cost(int base_feeding_cost) {

	this->base_feeding_cost = base_feeding_cost;

}

/**
**	Function: get base feeding cost
**	Description: gets base feeding cost
**	Parameters: none
**/
int Animal::get_base_feeding_cost() {

	return base_feeding_cost;

}

/**
**	Function: set feeding cost multiplier
**	Description: sets feeding cost multiplier
**	Parameters: new feeding cost multiplier
**/
void Animal::set_feeding_cost_multiplier(int feeding_cost_multiplier) {

	this->feeding_cost_multiplier = feeding_cost_multiplier;

}

/**
**	Function: get feeding cost multiplier
**	Description: gets feeding cost multiplier
**	Parameters: none
**/
int Animal::get_feeding_cost_multiplier() {

	return feeding_cost_multiplier;

}

/**
**	Function: set age
**	Description: sets age
**	Parameters: new age
**/
void Animal::set_age(int age) {

	this->age = age;

}

/**
**	Function: get age
**	Description: gets age
**	Parameters: none
**/
int Animal::get_age() {

	return age;

}

/**
**	Function: set revenue percentage
**	Description: sets revenue percentage
**	Parameters: new revenue percentage
**/
void Animal::set_revenue_percentage(double revenue_percentage) {

	this->revenue_percentage = revenue_percentage;

}

/**
**	Function: get revenue percentage
**	Description: gets revenue percentage
**	Parameters: none
**/
double Animal::get_revenue_percentage() {

	return revenue_percentage;

}

/**
**	Function: set sick
**	Description: sets sick boolean
**	Parameters: new sick boolean
**/
void Animal::set_sick(bool sick) {

	this->sick = sick;

}

/**
**	Function: is sick
**	Description: gets sick boolean
**	Parameters: none
**/
bool Animal::is_sick() {

	return sick;

}

/**
**	Function: get revenue
**	Description: gets the revenue generated by the animal
**	Parameters: none
**/
double Animal::get_revenue() {

	return .1 * purchase_cost * (get_growth_stage() == 0 ? 2 : 1);

}

/**
**	Function: get monthly cost
**	Description: gets the monthly cost of the animal
**	Parameters: none
**/
int Animal::get_monthly_cost() {

	return base_feeding_cost * feeding_cost_multiplier;

}

/**
**	Function: increase
**	Description: increments the animal's age
**	Parameters: increment amount
**/
void Animal::increase_age(int months) {

	this->age += months;

}

/**
**	Function: get growth stage
**	Description: gets the growth stage of the animal
**	Parameters: none
**/
int Animal::get_growth_stage() {

	if(age < 6) return 0;
	else if(age > 4 * 12) return 2;
	else return 1;

}